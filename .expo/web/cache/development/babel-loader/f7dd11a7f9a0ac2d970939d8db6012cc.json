{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CountriesScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      geonames = _useState4[0],\n      setGeonames = _useState4[1];\n\n  var inputText = route.params.inputText;\n\n  var getMovies = function getMovies() {\n    var response, json;\n    return _regeneratorRuntime.async(function getMovies$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://api.geonames.org/searchJSON?username=weknowit&maxRows=10&q=' + inputText));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context.sent;\n            setGeonames(json.geonames);\n            console.log(geonames[0].name);\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 14:\n            _context.prev = 14;\n            setLoading(false);\n            return _context.finish(14);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11, 14, 17]], Promise);\n  };\n\n  useEffect(function () {\n    getMovies();\n  }, []);\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      padding: 24\n    },\n    children: isLoading ? _jsx(ActivityIndicator, {}) : _jsx(FlatList, {\n      data: geonames,\n      keyExtractor: function keyExtractor(item) {\n        return item.name;\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsxs(Text, {\n          children: [item.name, \", \", item.population]\n        });\n      }\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/alire/Documents/Git/cityPop/src/screens/CountriesScreen.tsx"],"names":["React","useEffect","useState","CountriesScreen","route","navigation","isLoading","setLoading","geonames","setGeonames","inputText","params","getMovies","fetch","response","json","console","log","name","error","flex","padding","item","population"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;AAKA,eAAe,SAASC,eAAT,OAAgE;AAAA,MAArCC,KAAqC,QAArCA,KAAqC;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;;AAC7E,kBAAgCH,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOI,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAgCL,QAAQ,CAAa,EAAb,CAAxC;AAAA;AAAA,MAAOM,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAOC,SAAP,GAAoBN,KAAK,CAACO,MAA1B,CAAOD,SAAP;;AACA,MAAME,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEUC,KAAK,CAAC,uEAAqEH,SAAtE,CAFf;;AAAA;AAERI,YAAAA,QAFQ;AAAA;AAAA,6CAGKA,QAAQ,CAACC,IAAT,EAHL;;AAAA;AAGRA,YAAAA,IAHQ;AAIdN,YAAAA,WAAW,CAACM,IAAI,CAACP,QAAN,CAAX;AACAQ,YAAAA,OAAO,CAACC,GAAR,CAAYT,QAAQ,CAAC,CAAD,CAAR,CAAYU,IAAxB;AALc;AAAA;;AAAA;AAAA;AAAA;AAOdF,YAAAA,OAAO,CAACG,KAAR;;AAPc;AAAA;AASdZ,YAAAA,UAAU,CAAC,KAAD,CAAV;AATc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAaAN,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEQ,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,OAAO,EAAE;AAApB,KAAb;AAAA,cACGf,SAAS,GAAG,KAAC,iBAAD,KAAH,GACR,KAAC,QAAD;AACE,MAAA,IAAI,EAAEE,QADR;AAEE,MAAA,YAAY,EAAE,sBAAEc,IAAF;AAAA,eAAqBA,IAAI,CAACJ,IAA1B;AAAA,OAFhB;AAGE,MAAA,UAAU,EAAE;AAAA,YAAGI,IAAH,SAAGA,IAAH;AAAA,eACV,MAAC,IAAD;AAAA,qBAAOA,IAAI,CAACJ,IAAZ,QAAoBI,IAAI,CAACC,UAAzB;AAAA,UADU;AAAA;AAHd;AAFJ,IADF;AAaD","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ActivityIndicator, FlatList, ListRenderItem, ListRenderItemInfo, Text, View, } from 'react-native';\r\nimport { geonames } from '../constants/Interfaces';\r\nimport { CountriesProps } from '../constants/RootStack';\r\n\r\nexport default function CountriesScreen({ route, navigation }: CountriesProps) {\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [geonames, setGeonames] = useState<geonames[]>([]);\r\n\r\n  const {inputText} = route.params; \r\n  const getMovies = async () => {\r\n     try {\r\n      const response =  await fetch('http://api.geonames.org/searchJSON?username=weknowit&maxRows=10&q='+inputText);\r\n      const json = await response.json();\r\n      setGeonames(json.geonames);\r\n      console.log(geonames[0].name);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getMovies();\r\n  }, []);\r\n\r\n  return (\r\n    <View style={{ flex: 1, padding: 24 }}>\r\n      {isLoading ? <ActivityIndicator/> : (\r\n        <FlatList\r\n          data={geonames}\r\n          keyExtractor={( item: geonames) => item.name}\r\n          renderItem={({ item }: ListRenderItemInfo<geonames>) => (\r\n            <Text>{item.name}, {item.population}</Text>\r\n          )}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
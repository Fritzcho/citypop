{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Header } from \"../components\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CountriesScreen = function (_React$Component) {\n  _inherits(CountriesScreen, _React$Component);\n\n  var _super = _createSuper(CountriesScreen);\n\n  function CountriesScreen(props) {\n    var _this;\n\n    _classCallCheck(this, CountriesScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      geonames: [],\n      isLoading: true,\n      inputText: props.route.params.inputText,\n      countryCode: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(CountriesScreen, [{\n    key: \"getCountry\",\n    value: function getCountry() {\n      var response, json;\n      return _regeneratorRuntime.async(function getCountry$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch('http://api.geonames.org/searchJSON?username=weknowit&maxRows=1&featureClass=A&name_equals=' + this.state.inputText));\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              json = _context.sent;\n              this.setState({\n                geonames: json.geonames\n              });\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 13:\n              _context.prev = 13;\n              this.setState({\n                isLoading: false\n              });\n              return _context.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 10, 13, 16]], Promise);\n    }\n  }, {\n    key: \"getCities\",\n    value: function getCities() {\n      var response, json;\n      return _regeneratorRuntime.async(function getCities$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(fetch('http://api.geonames.org/searchJSON?username=weknowit&maxRows=10&featureClass=P&orderby=population&country=' + this.state.countryCode));\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              json = _context2.sent;\n              this.setState({\n                geonames: json.geonames\n              });\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n\n            case 13:\n              _context2.prev = 13;\n              this.setState({\n                isLoading: false\n              });\n              return _context2.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[0, 10, 13, 16]], Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.getCountry());\n\n            case 2:\n              this.setState({\n                countryCode: this.state.geonames[0].countryCode\n              });\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(this.getCities());\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsxs(View, {\n        style: {\n          flex: 1,\n          padding: 24\n        },\n        children: [_jsx(Header, {\n          content: this.props.route.params.inputText\n        }), this.state.isLoading ? _jsx(ActivityIndicator, {}) : _jsx(FlatList, {\n          data: this.state.geonames,\n          keyExtractor: function keyExtractor(item) {\n            return item.name;\n          },\n          renderItem: function renderItem(_ref) {\n            var item = _ref.item;\n            return _jsxs(Text, {\n              children: [item.name, \", \", item.population]\n            });\n          }\n        })]\n      });\n    }\n  }]);\n\n  return CountriesScreen;\n}(React.Component);\n\nexport { CountriesScreen as default };","map":{"version":3,"sources":["C:/Users/alire/Documents/Git/cityPop/src/screens/CountriesScreen.tsx"],"names":["React","Header","CountriesScreen","props","state","geonames","isLoading","inputText","route","params","countryCode","fetch","response","json","setState","console","error","getCountry","getCities","flex","padding","item","name","population","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;;;;;AASA,SAASC,MAAT;;;;IAUqBC,e;;;;;AACnB,2BAAYC,KAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,SAAS,EAAE,IAFA;AAGXC,MAAAA,SAAS,EAAEJ,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBF,SAHnB;AAIXG,MAAAA,WAAW,EAAE;AAJF,KAAb;AAFsB;AASvB;;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAE4BC,KAAK,CAC3B,+FACC,KAAKP,KAAL,CAAWG,SAFe,CAFjC;;AAAA;AAEUK,cAAAA,QAFV;AAAA;AAAA,+CAKuBA,QAAQ,CAACC,IAAT,EALvB;;AAAA;AAKUA,cAAAA,IALV;AAMI,mBAAKC,QAAL,CAAc;AAACT,gBAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAAhB,eAAd;AANJ;AAAA;;AAAA;AAAA;AAAA;AAQIU,cAAAA,OAAO,CAACC,KAAR;;AARJ;AAAA;AAUI,mBAAKF,QAAL,CAAc;AAACR,gBAAAA,SAAS,EAAE;AAAZ,eAAd;AAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAE4BK,KAAK,CAC3B,+GACC,KAAKP,KAAL,CAAWM,WAFe,CAFjC;;AAAA;AAEUE,cAAAA,QAFV;AAAA;AAAA,+CAKuBA,QAAQ,CAACC,IAAT,EALvB;;AAAA;AAKUA,cAAAA,IALV;AAMI,mBAAKC,QAAL,CAAc;AAACT,gBAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAAhB,eAAd;AANJ;AAAA;;AAAA;AAAA;AAAA;AAQIU,cAAAA,OAAO,CAACC,KAAR;;AARJ;AAAA;AAUI,mBAAKF,QAAL,CAAc;AAACR,gBAAAA,SAAS,EAAE;AAAZ,eAAd;AAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQ,KAAKW,UAAL,EADR;;AAAA;AAEE,mBAAKH,QAAL,CAAc;AAACJ,gBAAAA,WAAW,EAAE,KAAKN,KAAL,CAAWC,QAAX,CAAoB,CAApB,EAAuBK;AAArC,eAAd;AAFF;AAAA,+CAGQ,KAAKQ,SAAL,EAHR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAMA,kBAAU;AACR,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,OAAO,EAAE;AAApB,SAAb;AAAA,mBACE,KAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWK,KAAX,CAAiBC,MAAjB,CAAwBF;AAAzC,UADF,EAIG,KAAKH,KAAL,CAAWE,SAAX,GAAuB,KAAC,iBAAD,KAAvB,GACC,KAAC,QAAD;AACE,UAAA,IAAI,EAAE,KAAKF,KAAL,CAAWC,QADnB;AAEE,UAAA,YAAY,EAAE,sBAAEgB,IAAF;AAAA,mBAAqBA,IAAI,CAACC,IAA1B;AAAA,WAFhB;AAGE,UAAA,UAAU,EAAE;AAAA,gBAAGD,IAAH,QAAGA,IAAH;AAAA,mBACV,MAAC,IAAD;AAAA,yBAAOA,IAAI,CAACC,IAAZ,QAAoBD,IAAI,CAACE,UAAzB;AAAA,cADU;AAAA;AAHd,UALJ;AAAA,QADF;AAgBD;;;;EA/D0CvB,KAAK,CAACwB,S;;SAA9BtB,e","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { \r\n  ActivityIndicator, \r\n  FlatList, \r\n  ListRenderItemInfo, \r\n  Text, \r\n  View } from 'react-native';\r\nimport { geonames } from '../constants/Interfaces';\r\nimport { CountriesProps } from '../constants/RootStack';\r\nimport { Header } from '../components'\r\nimport { useRoute } from '@react-navigation/native';\r\n\r\ntype State = {\r\n  geonames: Array<geonames>,\r\n  isLoading: boolean,\r\n  inputText: string,\r\n  countryCode: string,\r\n}\r\n\r\nexport default class CountriesScreen extends React.Component<any, State> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      geonames: [],\r\n      isLoading: true,\r\n      inputText: props.route.params.inputText,\r\n      countryCode: \"\",\r\n    }\r\n  \r\n  }\r\n\r\n  async getCountry() {\r\n    try {\r\n      const response =  await fetch(\r\n        'http://api.geonames.org/searchJSON?username=weknowit&maxRows=1&featureClass=A&name_equals='\r\n        +this.state.inputText);\r\n      const json = await response.json();\r\n      this.setState({geonames: json.geonames});\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      this.setState({isLoading: false});\r\n    }\r\n  }\r\n\r\n  async getCities() {\r\n    try {\r\n      const response =  await fetch(\r\n        'http://api.geonames.org/searchJSON?username=weknowit&maxRows=10&featureClass=P&orderby=population&country='\r\n        +this.state.countryCode);\r\n      const json = await response.json();\r\n      this.setState({geonames: json.geonames});\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      this.setState({isLoading: false});\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getCountry();\r\n    this.setState({countryCode: this.state.geonames[0].countryCode})\r\n    await this.getCities();\r\n  }\r\n\r\n  render () {\r\n    return(\r\n      <View style={{ flex: 1, padding: 24 }}>\r\n        <Header content={this.props.route.params.inputText}/>\r\n        {/* {console.log(getCountryCode(geo[0].value))} */}\r\n\r\n        {this.state.isLoading ? <ActivityIndicator/> : (\r\n          <FlatList\r\n            data={this.state.geonames}\r\n            keyExtractor={( item: geonames) => item.name}\r\n            renderItem={({ item }: ListRenderItemInfo<geonames>) => (\r\n              <Text>{item.name}, {item.population}</Text>\r\n            )}\r\n          />\r\n        )}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\n// export default function CountriesScreen({ route, navigation }: CountriesProps) {\r\n//   const [isLoading, setLoading] = useState(true);\r\n//   const [geonames, setGeonames] = useState([]);\r\n//   const [geo, setGeo] = useState<\r\n//     Array<{\r\n//       key: string,\r\n//       value: geonames, \r\n//     }>\r\n//   >([]);\r\n//   const {inputText} = route.params; \r\n\r\n//   const getGeo = async () => {\r\n//      try {\r\n//       const response =  await fetch(\r\n//         'http://api.geonames.org/searchJSON?username=weknowit&maxRows=10&q='\r\n//         +inputText);\r\n//       const json = await response.json();\r\n//       setGeonames(json.geonames);\r\n//       setGeo(json.geonames.map(function(item:geonames) {\r\n//         return {\r\n//           key: item.name,\r\n//           value: item,\r\n//         }\r\n//       }))\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     getGeo();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <View style={{ flex: 1, padding: 24 }}>\r\n//       <Header content={inputText}/>\r\n//       {/* {console.log(getCountryCode(geo[0].value))} */}\r\n\r\n//       {isLoading ? <ActivityIndicator/> : (\r\n//         <FlatList\r\n//           data={geonames}\r\n//           keyExtractor={( item: geonames) => item.name}\r\n//           renderItem={({ item }: ListRenderItemInfo<geonames>) => (\r\n//             <Text>{item.name}, {item.population}</Text>\r\n//           )}\r\n//         />\r\n//       )}\r\n//     </View>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\n\nvar CountriesScreen = function (_React$Component) {\n  _inherits(CountriesScreen, _React$Component);\n\n  var _super = _createSuper(CountriesScreen);\n\n  function CountriesScreen() {\n    var _this;\n\n    _classCallCheck(this, CountriesScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      geonames: [],\n      isLoading: false\n    };\n    return _this;\n  }\n\n  return _createClass(CountriesScreen);\n}(React.Component);\n\nexport { CountriesScreen as default };","map":{"version":3,"sources":["C:/Users/alire/Documents/Git/cityPop/src/screens/CountriesScreen.tsx"],"names":["React","CountriesScreen","state","geonames","isLoading","Component"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;;IAWqBC,e;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,SAAS,EAAE;AAFL,K;;;;;EADmCJ,KAAK,CAACK,S;;SAA9BJ,e","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { \r\n  ActivityIndicator, \r\n  FlatList, \r\n  ListRenderItemInfo, \r\n  Text, \r\n  View } from 'react-native';\r\nimport { geonames } from '../constants/Interfaces';\r\nimport { CountriesProps } from '../constants/RootStack';\r\nimport { Header } from '../components'\r\n\r\nexport default class CountriesScreen extends React.Component {\r\n  state = {\r\n    geonames: [],\r\n    isLoading: false,\r\n  }\r\n}\r\n\r\n// export default function CountriesScreen({ route, navigation }: CountriesProps) {\r\n//   const [isLoading, setLoading] = useState(true);\r\n//   const [geonames, setGeonames] = useState([]);\r\n//   const [geo, setGeo] = useState<\r\n//     Array<{\r\n//       key: string,\r\n//       value: geonames, \r\n//     }>\r\n//   >([]);\r\n//   const {inputText} = route.params; \r\n\r\n//   const getGeo = async () => {\r\n//      try {\r\n//       const response =  await fetch(\r\n//         'http://api.geonames.org/searchJSON?username=weknowit&maxRows=10&q='\r\n//         +inputText);\r\n//       const json = await response.json();\r\n//       setGeonames(json.geonames);\r\n//       setGeo(json.geonames.map(function(item:geonames) {\r\n//         return {\r\n//           key: item.name,\r\n//           value: item,\r\n//         }\r\n//       }))\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     getGeo();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <View style={{ flex: 1, padding: 24 }}>\r\n//       <Header content={inputText}/>\r\n//       {/* {console.log(getCountryCode(geo[0].value))} */}\r\n\r\n//       {isLoading ? <ActivityIndicator/> : (\r\n//         <FlatList\r\n//           data={geonames}\r\n//           keyExtractor={( item: geonames) => item.name}\r\n//           renderItem={({ item }: ListRenderItemInfo<geonames>) => (\r\n//             <Text>{item.name}, {item.population}</Text>\r\n//           )}\r\n//         />\r\n//       )}\r\n//     </View>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Header } from \"../components\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar CityScreen = function (_React$Component) {\n  _inherits(CityScreen, _React$Component);\n\n  var _super = _createSuper(CityScreen);\n\n  function CityScreen(props) {\n    var _this;\n\n    _classCallCheck(this, CityScreen);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      geonames: [],\n      isLoading: true,\n      inputText: props.route.params.inputText,\n      cityName: \"\",\n      population: 0,\n      navigation: props.navigation\n    };\n    return _this;\n  }\n\n  _createClass(CityScreen, [{\n    key: \"getCity\",\n    value: function getCity() {\n      var response, json;\n      return _regeneratorRuntime.async(function getCity$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"ConnectionStrings.GET_CITY\" + this.state.inputText));\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              json = _context.sent;\n              this.setState({\n                geonames: json.geonames\n              });\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 13:\n              _context.prev = 13;\n              this.setState({\n                isLoading: false\n              });\n              return _context.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 10, 13, 16]], Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.getCity());\n\n            case 2:\n              this.setState({\n                cityName: this.state.geonames[0].name\n              });\n              this.setState({\n                population: this.state.geonames[0].population\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsxs(View, {\n        style: {\n          flex: 1,\n          padding: 24\n        },\n        children: [_jsx(Header, {\n          content: this.state.cityName\n        }), this.state.isLoading ? _jsx(ActivityIndicator, {}) : _jsxs(View, {\n          children: [_jsx(Text, {\n            children: \"Population:\"\n          }), _jsx(Text, {\n            children: this.state.population\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return CityScreen;\n}(React.Component);\n\nexport { CityScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 3\n  }\n});","map":{"version":3,"sources":["C:/Users/alire/Documents/Git/cityPop/src/screens/CityScreen.tsx"],"names":["React","Header","CityScreen","props","state","geonames","isLoading","inputText","route","params","cityName","population","navigation","fetch","response","json","setState","console","error","getCity","name","flex","padding","Component","styles","StyleSheet","create","container"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAOA,SAASC,MAAT;;;;IAYqBC,U;;;;;AACnB,sBAAYC,KAAZ,EAAwB;AAAA;;AAAA;;AACtB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,SAAS,EAAE,IAFA;AAGXC,MAAAA,SAAS,EAAEJ,KAAK,CAACK,KAAN,CAAYC,MAAZ,CAAmBF,SAHnB;AAIXG,MAAAA,QAAQ,EAAE,EAJC;AAKXC,MAAAA,UAAU,EAAE,CALD;AAMXC,MAAAA,UAAU,EAAET,KAAK,CAACS;AANP,KAAb;AAFsB;AAUvB;;;;WAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAE4BC,KAAK,CAC3B,+BACC,KAAKT,KAAL,CAAWG,SAFe,CAFjC;;AAAA;AAEUO,cAAAA,QAFV;AAAA;AAAA,+CAKuBA,QAAQ,CAACC,IAAT,EALvB;;AAAA;AAKUA,cAAAA,IALV;AAMI,mBAAKC,QAAL,CAAc;AAACX,gBAAAA,QAAQ,EAAEU,IAAI,CAACV;AAAhB,eAAd;AANJ;AAAA;;AAAA;AAAA;AAAA;AAQIY,cAAAA,OAAO,CAACC,KAAR;;AARJ;AAAA;AAUI,mBAAKF,QAAL,CAAc;AAACV,gBAAAA,SAAS,EAAE;AAAZ,eAAd;AAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQ,KAAKa,OAAL,EADR;;AAAA;AAEE,mBAAKH,QAAL,CAAc;AAACN,gBAAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWC,QAAX,CAAoB,CAApB,EAAuBe;AAAlC,eAAd;AACA,mBAAKJ,QAAL,CAAc;AAACL,gBAAAA,UAAU,EAAE,KAAKP,KAAL,CAAWC,QAAX,CAAoB,CAApB,EAAuBM;AAApC,eAAd;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAMA,kBAAU;AACR,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEU,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,OAAO,EAAE;AAApB,SAAb;AAAA,mBACE,KAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,KAAKlB,KAAL,CAAWM;AAA5B,UADF,EAEG,KAAKN,KAAL,CAAWE,SAAX,GAAuB,KAAC,iBAAD,KAAvB,GACG,MAAC,IAAD;AAAA,qBACI,KAAC,IAAD;AAAA;AAAA,YADJ,EAEI,KAAC,IAAD;AAAA,sBAAO,KAAKF,KAAL,CAAWO;AAAlB,YAFJ;AAAA,UAHN;AAAA,QADF;AAWD;;;;EA7CqCX,KAAK,CAACuB,S;;SAAzBrB,U;AAgDrB,IAAMsB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,SAAS,EAAE;AACPN,IAAAA,IAAI,EAAE;AADC;AADkB,CAAlB,CAAf","sourcesContent":["import React from 'react';\r\nimport { \r\n  ActivityIndicator, \r\n  View,\r\n  Text,\r\n  StyleSheet } from 'react-native';\r\nimport { geonames } from '../constants/Interfaces';\r\nimport { Header } from '../components'\r\nimport { ConnectionStrings } from '../helper/Variables';\r\n\r\ntype State = {\r\n  geonames: Array<geonames>,\r\n  isLoading: boolean,\r\n  inputText: string,\r\n  cityName: string,\r\n  population: number,\r\n  navigation: any,\r\n}\r\n\r\nexport default class CityScreen extends React.Component<any, State> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      geonames: [],\r\n      isLoading: true,\r\n      inputText: props.route.params.inputText,\r\n      cityName: \"\",\r\n      population: 0,\r\n      navigation: props.navigation,\r\n    }\r\n  }\r\n\r\n  async getCity() {\r\n    try {\r\n      const response =  await fetch(\r\n        \"ConnectionStrings.GET_CITY\"\r\n        +this.state.inputText);\r\n      const json = await response.json();\r\n      this.setState({geonames: json.geonames});\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      this.setState({isLoading: false});\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getCity();\r\n    this.setState({cityName: this.state.geonames[0].name});\r\n    this.setState({population: this.state.geonames[0].population});\r\n  }\r\n\r\n  render () {\r\n    return(\r\n      <View style={{ flex: 1, padding: 24 }}>\r\n        <Header content={this.state.cityName}/>\r\n        {this.state.isLoading ? <ActivityIndicator/> : (\r\n            <View>\r\n                <Text>Population:</Text>\r\n                <Text>{this.state.population}</Text>\r\n            </View>\r\n        )}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 3\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}
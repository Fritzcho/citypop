{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { HomeScreen, SearchByCity, SearchByCountry, CityView, CountriesView } from \"./src/screens\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      userData = _useState2[0],\n      setUserData = _useState2[1];\n\n  console.clear();\n  console.log('User Data: ', userData);\n  useEffect(function () {\n    axios.get('http://api.geonames.org/searchJSON?username=weknowit&q=London').then(function (response) {\n      setUserData(response.data);\n    });\n  }, []);\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Home\",\n        component: HomeScreen\n      }), _jsx(Stack.Screen, {\n        name: \"SearchByCity\",\n        component: SearchByCity\n      }), _jsx(Stack.Screen, {\n        name: \"SearchByCountry\",\n        component: SearchByCountry\n      }), _jsx(Stack.Screen, {\n        name: \"CityView\",\n        component: CityView\n      }), _jsx(Stack.Screen, {\n        name: \"CountriesView\",\n        component: CountriesView\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingVertical: 30,\n    paddingHorizontal: 30,\n    backgroundColor: '#E7E7E7'\n  }\n});","map":{"version":3,"sources":["C:/Users/alire/Documents/Git/citypop/App.tsx"],"names":["React","useState","useEffect","NavigationContainer","createNativeStackNavigator","HomeScreen","SearchByCity","SearchByCountry","CityView","CountriesView","axios","Stack","App","userData","setUserData","console","clear","log","get","then","response","data","styles","StyleSheet","create","container","flex","flexDirection","paddingVertical","paddingHorizontal","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,eAAnC,EAAoDC,QAApD,EAA8DC,aAA9D;AAEA,OAAOC,KAAP,MAAmC,OAAnC;;;AAEA,IAAMC,KAAK,GAAGP,0BAA0B,EAAxC;AAEA,eAAe,SAASQ,GAAT,GAAe;AAC5B,kBAAgCX,QAAQ,CAAa,EAAb,CAAxC;AAAA;AAAA,MAAOY,QAAP;AAAA,MAAiBC,WAAjB;;AACAC,EAAAA,OAAO,CAACC,KAAR;AACAD,EAAAA,OAAO,CAACE,GAAR,CAAY,aAAZ,EAA2BJ,QAA3B;AACAX,EAAAA,SAAS,CAAC,YAAI;AACZQ,IAAAA,KAAK,CACFQ,GADH,CACmB,+DADnB,EAEGC,IAFH,CAEQ,UAACC,QAAD,EAA6B;AACjCN,MAAAA,WAAW,CAACM,QAAQ,CAACC,IAAV,CAAX;AACD,KAJH;AAMD,GAPQ,EAON,EAPM,CAAT;AAuCE,SACE,KAAC,mBAAD;AAAA,cACE,MAAC,KAAD,CAAO,SAAP;AAAA,iBACE,KAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,MAAnB;AAA0B,QAAA,SAAS,EAAEhB;AAArC,QADF,EAEE,KAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,cAAnB;AAAkC,QAAA,SAAS,EAAEC;AAA7C,QAFF,EAGE,KAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,iBAAnB;AAAqC,QAAA,SAAS,EAAEC;AAAhD,QAHF,EAIE,KAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,UAAnB;AAA8B,QAAA,SAAS,EAAEC;AAAzC,QAJF,EAKE,KAAC,KAAD,CAAO,MAAP;AAAc,QAAA,IAAI,EAAC,eAAnB;AAAmC,QAAA,SAAS,EAAEC;AAA9C,QALF;AAAA;AADF,IADF;AAWD;AAGH,IAAMa,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,aAAa,EAAE,QAFR;AAGPC,IAAAA,eAAe,EAAE,EAHV;AAIPC,IAAAA,iBAAiB,EAAE,EAJZ;AAKPC,IAAAA,eAAe,EAAE;AALV;AADoB,CAAlB,CAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { ActivityIndicator, View, StyleSheet } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { HomeScreen, SearchByCity, SearchByCountry, CityView, CountriesView } from './src/screens';\r\nimport {geonames} from './src/constants/Interfaces'\r\nimport axios, {AxiosResponse} from 'axios';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {// extends React.Component{\r\n  const [userData, setUserData] = useState<geonames[]>([]);\r\n  console.clear();\r\n  console.log('User Data: ', userData);\r\n  useEffect(()=>{\r\n    axios\r\n      .get<geonames[]>('http://api.geonames.org/searchJSON?username=weknowit&q=London')\r\n      .then((response: AxiosResponse) => {\r\n        setUserData(response.data);\r\n      })\r\n\r\n  }, []);\r\n//   constructor(props: {} | Readonly<{}>) {\r\n//     super(props);\r\n//     this.state = {\r\n//       isLoading: true,\r\n//       dataSource: null,\r\n//     }\r\n//   }\r\n\r\n  // componentDidMount () {\r\n  //   return fetch('http://api.geonames.org/searchJSON?username=weknowit')\r\n  //     .then((response) => response.json())\r\n  //     .then((responseJson) => {\r\n  //       this.setState({\r\n  //         isLoading: false,\r\n  //         dataSource: responseJson.geonames,\r\n  //       })\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log(error)\r\n  //     });\r\n  // }\r\n\r\n  // render(){\r\n\r\n    // if (this.state.isLoading  ) {\r\n    //   return (\r\n    //     <View style={styles.container}>\r\n    //       <ActivityIndicator />\r\n    //     </View>\r\n    //   )\r\n    // }\r\n    return (\r\n      <NavigationContainer>\r\n        <Stack.Navigator>\r\n          <Stack.Screen name=\"Home\" component={HomeScreen}/>\r\n          <Stack.Screen name=\"SearchByCity\" component={SearchByCity}/>\r\n          <Stack.Screen name=\"SearchByCountry\" component={SearchByCountry}/>\r\n          <Stack.Screen name=\"CityView\" component={CityView}/>\r\n          <Stack.Screen name=\"CountriesView\" component={CountriesView}/>\r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n    );\r\n  }\r\n//}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n      flex: 1,\r\n      flexDirection: \"column\",\r\n      paddingVertical: 30,\r\n      paddingHorizontal: 30,\r\n      backgroundColor: '#E7E7E7',    \r\n  },\r\n});\r\n\r\n"]},"metadata":{},"sourceType":"module"}
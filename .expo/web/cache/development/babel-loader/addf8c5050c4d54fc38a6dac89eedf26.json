{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CityScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      geonames = _useState4[0],\n      setGeonames = _useState4[1];\n\n  var inputText = route.params.inputText;\n\n  var getGeo = function getGeo() {\n    var response, json;\n    return _regeneratorRuntime.async(function getGeo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('http://api.geonames.org/searchJSON?username=weknowit&maxRows=10&q=' + inputText));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context.sent;\n            setGeonames(json.geonames);\n            setGeo(json.geonames.map(function (item) {\n              return {\n                key: item.name,\n                value: item\n              };\n            }));\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n\n          case 14:\n            _context.prev = 14;\n            setLoading(false);\n            return _context.finish(14);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11, 14, 17]], Promise);\n  };\n\n  useEffect(function () {\n    getGeo();\n  }, []);\n  return _jsx(View, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Population:\"\n      }), _jsx(Text, {\n        children: \"123\"\n      })]\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/alire/Documents/Git/cityPop/src/screens/CityScreen.tsx"],"names":["React","useState","CityScreen","route","navigation","isLoading","setLoading","geonames","setGeonames","inputText","params","getGeo","fetch","response","json","setGeo","map","item","key","name","value","console","error","useEffect"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAIA,eAAe,SAASC,UAAT,OAA2D;AAAA,MAArCC,KAAqC,QAArCA,KAAqC;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;;AACtE,kBAAgCH,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOI,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAgCL,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOM,QAAP;AAAA,MAAiBC,WAAjB;;AACA,MAAOC,SAAP,GAAoBN,KAAK,CAACO,MAA1B,CAAOD,SAAP;;AAEA,MAAME,MAAM,GAAG,SAATA,MAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEaC,KAAK,CAC3B,uEACCH,SAF0B,CAFlB;;AAAA;AAELI,YAAAA,QAFK;AAAA;AAAA,6CAKQA,QAAQ,CAACC,IAAT,EALR;;AAAA;AAKLA,YAAAA,IALK;AAMXN,YAAAA,WAAW,CAACM,IAAI,CAACP,QAAN,CAAX;AACAQ,YAAAA,MAAM,CAACD,IAAI,CAACP,QAAL,CAAcS,GAAd,CAAkB,UAASC,IAAT,EAAwB;AAC/C,qBAAO;AACLC,gBAAAA,GAAG,EAAED,IAAI,CAACE,IADL;AAELC,gBAAAA,KAAK,EAAEH;AAFF,eAAP;AAID,aALM,CAAD,CAAN;AAPW;AAAA;;AAAA;AAAA;AAAA;AAcXI,YAAAA,OAAO,CAACC,KAAR;;AAdW;AAAA;AAgBXhB,YAAAA,UAAU,CAAC,KAAD,CAAV;AAhBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAoBAiB,EAAAA,SAAS,CAAC,YAAM;AACdZ,IAAAA,MAAM;AACP,GAFQ,EAEN,EAFM,CAAT;AAGA,SACE,KAAC,IAAD;AAAA,cACI,MAAC,IAAD;AAAA,iBACI,KAAC,IAAD;AAAA;AAAA,QADJ,EAEI,KAAC,IAAD;AAAA;AAAA,QAFJ;AAAA;AADJ,IADF;AAQH","sourcesContent":["import React, { useState } from 'react';\r\nimport { Text, View } from 'react-native';\r\nimport { CountriesProps } from '../constants/RootStack';\r\n\r\nexport default function CityScreen({ route, navigation }: CountriesProps) {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [geonames, setGeonames] = useState([]);\r\n    const {inputText} = route.params; \r\n    \r\n    const getGeo = async () => {\r\n       try {\r\n        const response =  await fetch(\r\n          'http://api.geonames.org/searchJSON?username=weknowit&maxRows=10&q='\r\n          +inputText);\r\n        const json = await response.json();\r\n        setGeonames(json.geonames);\r\n        setGeo(json.geonames.map(function(item:geonames) {\r\n          return {\r\n            key: item.name,\r\n            value: item,\r\n          }\r\n        }))\r\n      } catch (error) {\r\n        console.error(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  \r\n    useEffect(() => {\r\n      getGeo();\r\n    }, []);\r\n    return (\r\n      <View>\r\n          <View>\r\n              <Text>Population:</Text>\r\n              <Text>123</Text>\r\n          </View>\r\n      </View>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}